package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"
	"fmt"
	"github.com/vibovenkat123/pennyearned-server/graph/model"
	"github.com/vibovenkat123/pennyearned-server/internal/db/helpers"
	database "github.com/vibovenkat123/pennyearned-server/internal/db/services"
)

// CreateExpense is the resolver for the createExpense field.
func (r *mutationResolver) CreateExpense(ctx context.Context, input model.NewExpense) (*model.Expense, error) {
	panic(fmt.Errorf("not implemented: CreateExpense - createExpense"))
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	var arr []*model.User
	_, err := database.Connect()
	dbHelpers.Db.Select(&arr, "SELECT * FROM users")
	return arr, err
}

// Expenses is the resolver for the expenses field.
func (r *queryResolver) Expenses(ctx context.Context) ([]*model.Expense, error) {
	var arr []*model.Expense
	data := []dbHelpers.Expense{}
	_, err := database.Connect()
	dbHelpers.Db.Select(&data, "SELECT * FROM expenses")
	for _, r := range data {
		arr = append(arr, &model.Expense{
			ID:      r.ID,
			OwnerID: r.OwnerID,
			Name:    r.Name,
			Spent:   r.Spent,
		})
	}
	return arr, err
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
